#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include <stdlib.h>
#define ALPHABET_SIZE 26
#define MAX_TEXT_LENGTH 1000
#define TOP_N 10
double english_freq[ALPHABET_SIZE] = {
    0.082, 0.015, 0.028, 0.043, 0.127, 0.022, 0.020, 0.061, 0.070, 0.002, 0.008, 0.040, 0.024, 0.067, 0.075,
    0.019, 0.001, 0.060, 0.063, 0.091, 0.028, 0.010, 0.023, 0.001, 0.020, 0.002, 0.002
};
int char_to_int(char c) {
    return toupper(c) - 'A';
}
char int_to_char(int index) {
    return 'A' + index;
}
double calculate_likelihood(char *text) {
    int i;
    int letter_count[ALPHABET_SIZE] = {0};
    int total_letters = 0;
    for (i = 0; i < strlen(text); i++) {
        if (isalpha(text[i])) {
            letter_count[char_to_int(text[i])]++; 
            total_letters++;
        }
    }
    // Calculate likelihood based on the letter frequencies
    double likelihood = 0.0;
    for (i = 0; i < ALPHABET_SIZE; i++) {
        double observed_freq = (double)letter_count[i] / total_letters;
        likelihood += (observed_freq - english_freq[i]) * (observed_freq - english_freq[i]);
    }
    return likelihood;
}
// Function to perform a monoalphabetic substitution decryption
void decrypt_with_mapping(char *ciphertext, char *plaintext, char *mapping) {
    int i;
    for (i = 0; i < strlen(ciphertext); i++) {
        if (isalpha(ciphertext[i])) {
            int index = char_to_int(ciphertext[i]);
            plaintext[i] = mapping[index];
        } else {
            plaintext[i] = ciphertext[i]; // Keep non-alphabetic characters unchanged
        }
    }
    plaintext[i] = '\0'; // Null-terminate the plaintext
}
// Function to sort the likelihoods and corresponding mappings
void sort_likelihoods(double likelihoods[], char *mapped_text[], int top_n) {
    int i, j;
    for (i = 0; i < top_n - 1; i++) {
        for (j = i + 1; j < top_n; j++) {
            if (likelihoods[i] > likelihoods[j]) {
                // Swap likelihoods
                double temp = likelihoods[i];
                likelihoods[i] = likelihoods[j];
                likelihoods[j] = temp;
                // Swap corresponding mapped texts
                char *temp_text = mapped_text[i];
                mapped_text[i] = mapped_text[j];
                mapped_text[j] = temp_text;
            }
        }
    }
}
// Function to perform the letter frequency attack on the cipher
void letter_frequency_attack(char *ciphertext, int top_n) {
    int i, j;
    char decrypted_text[MAX_TEXT_LENGTH];
    char mapping[ALPHABET_SIZE];
    char cipher_alphabet[ALPHABET_SIZE] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    
    // Step 1: Analyze the frequencies of letters in the ciphertext
    int letter_count[ALPHABET_SIZE] = {0};
    int total_letters = 0;
    for (i = 0; i < strlen(ciphertext); i++) {
        if (isalpha(ciphertext[i])) {
            letter_count[char_to_int(ciphertext[i])]++; 
            total_letters++;
        }
    }
    // Step 2: Generate possible mappings based on frequency comparison
    char sorted_cipher[ALPHABET_SIZE];
    int sorted_cipher_freq[ALPHABET_SIZE];
    
    for (i = 0; i < ALPHABET_SIZE; i++) {
        sorted_cipher[i] = cipher_alphabet[i];
        sorted_cipher_freq[i] = letter_count[i];
    }
    
    // Sort cipher letters based on frequency (descending)
    for (i = 0; i < ALPHABET_SIZE - 1; i++) {
        for (j = i + 1; j < ALPHABET_SIZE; j++) {
            if (sorted_cipher_freq[i] < sorted_cipher_freq[j]) {
                int temp_freq = sorted_cipher_freq[i];
                sorted_cipher_freq[i] = sorted_cipher_freq[j];
                sorted_cipher_freq[j] = temp_freq;
                char temp_char = sorted_cipher[i];
                sorted_cipher[i] = sorted_cipher[j];
                sorted_cipher[j] = temp_char;
            }
        }
    }
    // Step 3: Try each possible mapping of the sorted ciphertext letters to the most frequent English letters
    char *mapped_text[TOP_N];
    double likelihoods[TOP_N];
    for (i = 0; i < top_n; i++) {
        mapping[i] = cipher_alphabet[i];
        mapped_text[i] = (char *)malloc(MAX_TEXT_LENGTH);
    }
    // Step 4: Generate plaintexts based on mappings and calculate likelihood
    for (i = 0; i < top_n; i++) {
        for (j = 0; j < ALPHABET_SIZE; j++) {
            mapping[j] = sorted_cipher[j];
        }
        decrypt_with_mapping(ciphertext, decrypted_text, mapping);
        likelihoods[i] = calculate_likelihood(decrypted_text);
        mapped_text[i] = decrypted_text;
    }
    // Step 5: Sort and output the top N plaintexts based on likelihoods
    sort_likelihoods(likelihoods, mapped_text, top_n);
    printf("Top %d possible plaintexts:\n", top_n);
    for (i = 0; i < top_n; i++) {
        printf("Plaintext %d: %s (Likelihood: %lf)\n", i + 1, mapped_text[i], likelihoods[i]);
    }
}
int main() {
    char ciphertext[] = "DEEPIKA";
    int top_n = 10;
    
    printf("Ciphertext: %s\n", ciphertext);
    letter_frequency_attack(ciphertext, top_n);
    
    return 0;
}
